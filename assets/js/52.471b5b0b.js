(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{338:function(v,_,e){"use strict";e.r(_);var t=e(10),a=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"js面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js面试题"}},[v._v("#")]),v._v(" js面试题")]),v._v(" "),_("h2",{attrs:{id:"js基本数据类型有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js基本数据类型有哪些"}},[v._v("#")]),v._v(" "),_("code",[v._v("js")]),v._v("基本数据类型有哪些")]),v._v(" "),_("ul",[_("li",[v._v("基本类型"),_("code",[v._v("Number")]),v._v(" 、"),_("code",[v._v("String")]),v._v("、"),_("code",[v._v("Boolean")]),v._v("、"),_("code",[v._v("Null")]),v._v("、"),_("code",[v._v("Undefined")])]),v._v(" "),_("li",[v._v("引用类型"),_("code",[v._v("Object")])])]),v._v(" "),_("h2",{attrs:{id:"js当中的typeof返回的类型有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js当中的typeof返回的类型有哪些"}},[v._v("#")]),v._v(" "),_("code",[v._v("JS")]),v._v("当中的"),_("code",[v._v("typeof")]),v._v("返回的类型有哪些？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("number")]),v._v(" 、"),_("code",[v._v("string")]),v._v(" 、"),_("code",[v._v("boolean")]),v._v(" 、 "),_("code",[v._v("undefined")]),v._v(" 、"),_("code",[v._v("function")]),v._v(" 、"),_("code",[v._v("object")])])]),v._v(" "),_("h2",{attrs:{id:"return-break-continue的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#return-break-continue的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("return")]),v._v("，"),_("code",[v._v("break")]),v._v("，"),_("code",[v._v("continue")]),v._v("的区别？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("return")]),v._v("：必须写在函数内部，遇到"),_("code",[v._v("return")]),v._v("后函数内部剩余的代码不再执行，直接返回；还可以使用"),_("code",[v._v("return")]),v._v("返回一个值给外面使用")]),v._v(" "),_("li",[_("code",[v._v("break")]),v._v("：跳出循环，剩余的循环不再执行")]),v._v(" "),_("li",[_("code",[v._v("continue")]),v._v("：跳出本次循环，剩余的循环继续执行")])]),v._v(" "),_("h2",{attrs:{id:"typeof和instance-of的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#typeof和instance-of的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("typeof")]),v._v("和"),_("code",[v._v("instance of")]),v._v("的区别？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("typeof")]),v._v("判断对象的类型，返回值有6种可能")]),v._v(" "),_("li",[_("code",[v._v("instance of")]),v._v("判断是否是对方的实例化对象，返回值为"),_("code",[v._v("true")]),v._v("或者"),_("code",[v._v("false")])])]),v._v(" "),_("h2",{attrs:{id:"宽松相等-和-严格相等-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#宽松相等-和-严格相等-的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("==")]),v._v("（宽松相等）和 "),_("code",[v._v("===")]),v._v("（严格相等）的区别？")]),v._v(" "),_("ul",[_("li",[v._v("== 判断左右两边的值是否一致，但是只能判断值，不能判断类型，也就是说 2 =='2'是成立的")]),v._v(" "),_("li",[v._v("=== 既判断值，也判断类型")])]),v._v(" "),_("h2",{attrs:{id:"js的强制转换和隐式转换是怎样的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js的强制转换和隐式转换是怎样的"}},[v._v("#")]),v._v(" "),_("code",[v._v("js")]),v._v("的强制转换和隐式转换是怎样的？")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("parseInt")]),v._v("、"),_("code",[v._v("parseFloat")]),v._v("、"),_("code",[v._v("Number")]),v._v(" 这三种是强制转换")]),v._v(" "),_("li",[_("code",[v._v("-=")]),v._v("、"),_("code",[v._v("*=")]),v._v("、"),_("code",[v._v("/=")]),v._v("、"),_("code",[v._v("%=")]),v._v(" 是隐式转换")])]),v._v(" "),_("h2",{attrs:{id:"get请求和post请求的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get请求和post请求的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("get")]),v._v("请求和"),_("code",[v._v("post")]),v._v("请求的区别?")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("get")]),v._v("请求将参数放在"),_("code",[v._v("url")]),v._v("当中，"),_("code",[v._v("post")]),v._v("请求将参数放在请求体当中，理论上"),_("code",[v._v("post")]),v._v("更安全因为"),_("code",[v._v("url")]),v._v("长度大小不能超过"),_("code",[v._v("1KB")]),v._v("，而"),_("code",[v._v("get")]),v._v("请求又将参数放在"),_("code",[v._v("url")]),v._v("当中，所以上传头像等操作不能使用"),_("code",[v._v("get")]),v._v("请求")])]),v._v(" "),_("h2",{attrs:{id:"什么是冒泡和捕获"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是冒泡和捕获"}},[v._v("#")]),v._v(" 什么是冒泡和捕获？")]),v._v(" "),_("ul",[_("li",[v._v("当一个子标签触发某一个事件(比如"),_("code",[v._v("click")]),v._v(")后，该事件会从顶级父标签一级一级往该标签传递，这个过程叫做挖洞（捕获）")]),v._v(" "),_("li",[v._v("当找到该子标签之后事件会再从子标签开始一级一级往父标签传递，这个过程叫做冒泡")])]),v._v(" "),_("h2",{attrs:{id:"js当中的事件委托是怎么回事"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js当中的事件委托是怎么回事"}},[v._v("#")]),v._v(" "),_("code",[v._v("js")]),v._v("当中的事件委托是怎么回事？")]),v._v(" "),_("ul",[_("li",[v._v("用事件冒泡的原理，自己所触发的事件， 让他的父元素代替执行")])]),v._v(" "),_("h2",{attrs:{id:"call、apply、和bind的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#call、apply、和bind的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("call")]),v._v("、"),_("code",[v._v("apply")]),v._v("、和"),_("code",[v._v("bind")]),v._v("的区别？")]),v._v(" "),_("ul",[_("li",[v._v("都可以更改"),_("code",[v._v("this")]),v._v("指向")]),v._v(" "),_("li",[_("code",[v._v("call")]),v._v("，"),_("code",[v._v("bind")]),v._v("后面的第一个参数是指向的对象，第二个参数是往对象传的值")]),v._v(" "),_("li",[_("code",[v._v("apply")]),v._v("后面的第一个参数是指向的对象，第二个参数是数组，数组里面是往对象传的值（"),_("code",[v._v("arguments")]),v._v("全部参数）")]),v._v(" "),_("li",[_("code",[v._v("call")]),v._v("和"),_("code",[v._v("apply")]),v._v("更改"),_("code",[v._v("this")]),v._v("指向会自动调用，"),_("code",[v._v("bind")]),v._v("需要手动调用")])]),v._v(" "),_("h2",{attrs:{id:"jsonp的作用是什么-原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jsonp的作用是什么-原理"}},[v._v("#")]),v._v(" "),_("code",[v._v("jsonP")]),v._v("的作用是什么，原理？")]),v._v(" "),_("ul",[_("li",[v._v("作用:解决跨域问题")]),v._v(" "),_("li",[v._v("原理:动态创建"),_("code",[v._v("script")]),v._v("标签，回调函数")])]),v._v(" "),_("h2",{attrs:{id:"cookie、sessionstorage、localstorage的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookie、sessionstorage、localstorage的区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("cookie")]),v._v("、"),_("code",[v._v("sessionStorage")]),v._v("、"),_("code",[v._v("localStorage")]),v._v("的区别？")]),v._v(" "),_("ul",[_("li",[v._v("都可以用来存储数据")]),v._v(" "),_("li",[_("code",[v._v("cookie")]),v._v("一条数据大小不能超过4KB ，最多不能存储超过20条，如果没有设置过期时间，那么在浏览器关闭后消失")]),v._v(" "),_("li",[_("code",[v._v("sessionStorage")]),v._v("是会话存储，一条大小不能超过5M，数量没有限制，关掉页面数据消失")]),v._v(" "),_("li",[_("code",[v._v("localStorage")]),v._v("本地存储，一条大小不超过5M，数量没有限制，除非主动删除，否则数据不会消失")])]),v._v(" "),_("h2",{attrs:{id:"原型的概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原型的概念"}},[v._v("#")]),v._v(" 原型的概念")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("JavaScript")]),v._v("的所有对象中都包含了一个 "),_("code",[v._v("proto")]),v._v(" 内部属性，这个属性所对应的就是自身的原型"),_("code",[v._v("JavaScript")]),v._v("的函数对象，除了原型 "),_("code",[v._v("proto")]),v._v(" 之外，还有 "),_("code",[v._v("prototype")]),v._v(" 属性，当函数对象作为构造函数创建实例时，该 "),_("code",[v._v("prototype")]),v._v(" 属性值将被作为实例对象的原型 "),_("code",[v._v("proto")])])]),v._v(" "),_("h2",{attrs:{id:"什么是原型链"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型链"}},[v._v("#")]),v._v(" 什么是原型链？")]),v._v(" "),_("ul",[_("li",[v._v("一个对象A调用方法的时候，会先从自身找有没有这个方法，如果没有就找自己的原型，看有没有该方法，没有就继续找对象A的父类B的原型，就这样一级一级往上找，称之为原型链。")]),v._v(" "),_("li",[v._v("任何一级找到就直接调用，不再往上找，如果到最后都没找到就报错")])]),v._v(" "),_("h2",{attrs:{id:"什么是闭包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包"}},[v._v("#")]),v._v(" 什么是闭包？")]),v._v(" "),_("ul",[_("li",[v._v("闭包指的是一个函数可以访问另一个函数作用域中变量")])]),v._v(" "),_("h2",{attrs:{id:"同步异步的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同步异步的区别是什么"}},[v._v("#")]),v._v(" 同步异步的区别是什么？")]),v._v(" "),_("ul",[_("li",[v._v("同步流程:提交请求→等待服务器处理→处理完毕返回")])]),v._v(" "),_("blockquote",[_("p",[v._v("一次请求之后必须处理完毕后才能处理后续操作，处理效率较低。（例如B/S模式）")])]),v._v(" "),_("ul",[_("li",[v._v("异步流程:提交请求→服务器处理→处理完毕")])]),v._v(" "),_("blockquote",[_("p",[v._v("发送请求后不需要等待，可以继续执行后续操作。\n当有消息返回时系统会通知进程进行处理，可以提高执行效率。（例如AJAX技术）")])]),v._v(" "),_("h2",{attrs:{id:"es6语法的新增特性有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#es6语法的新增特性有哪些"}},[v._v("#")]),v._v(" "),_("code",[v._v("ES6")]),v._v("语法的新增特性有哪些？")]),v._v(" "),_("ul",[_("li",[v._v("let关键字，声明变量、const关键字，声明常量")]),v._v(" "),_("li",[v._v("模板字符串")]),v._v(" "),_("li",[v._v("箭头函数")]),v._v(" "),_("li",[v._v("对象和数组解构")]),v._v(" "),_("li",[v._v("Set集合和Map集合")]),v._v(" "),_("li",[v._v("Promise对象")]),v._v(" "),_("li",[v._v("引入class关键字"),_("br"),v._v("\n······")])]),v._v(" "),_("h2",{attrs:{id:"var和let的区别有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#var和let的区别有哪些"}},[v._v("#")]),v._v(" "),_("code",[v._v("var")]),v._v("和"),_("code",[v._v("let")]),v._v("的区别有哪些？")]),v._v(" "),_("ul",[_("li",[v._v("可以用"),_("code",[v._v("var")]),v._v("对同一个变量重复声明，但是"),_("code",[v._v("let")]),v._v("不可以")]),v._v(" "),_("li",[_("code",[v._v("var")]),v._v("有变量提升，可以先赋值，后声明。"),_("code",[v._v("let")]),v._v("没有变量提升，只能先声明，后赋值")]),v._v(" "),_("li",[_("code",[v._v("let")]),v._v("声明的变量 有块级作用域")])]),v._v(" "),_("h2",{attrs:{id:"严格模式有哪些特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#严格模式有哪些特性"}},[v._v("#")]),v._v(" 严格模式有哪些特性？")]),v._v(" "),_("ul",[_("li",[v._v("变量必须先声明 在使用  变量提升没了")]),v._v(" "),_("li",[v._v("严格模式下 删除后的变量不能使用")]),v._v(" "),_("li",[v._v("严格模式下 函数内部的this指向默认指向的是 undefind")]),v._v(" "),_("li",[v._v("严格模式下 定时器 延时器内部的this指向的还是window")]),v._v(" "),_("li",[v._v("严格模式下 函数的参数的名字不能一样")]),v._v(" "),_("li",[v._v("严格模式下 块级作用域当中不能声明函数")])]),v._v(" "),_("h2",{attrs:{id:"export-default-和-exports有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#export-default-和-exports有什么区别"}},[v._v("#")]),v._v(" "),_("code",[v._v("export default")]),v._v(" 和 "),_("code",[v._v("exports")]),v._v("有什么区别？")]),v._v(" "),_("ul",[_("li",[v._v("前者是默认导出，每个模块只能有一个，导入的时候需要用 "),_("code",[v._v("import XX from‘XXX’")]),v._v("这种方式")]),v._v(" "),_("li",[v._v("后者是导出，每个模块可以有多个，导入的时候需要用"),_("code",[v._v("import {XX} from‘XX’")]),v._v("的方式"),_("br"),v._v("\n如果在一个模块中没有向外暴露成员，其他模块引入该模块时将会得到一个空对象")])])])}),[],!1,null,null,null);_.default=a.exports}}]);